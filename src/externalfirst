#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>

extern int errno;
void syserr(char* );

void external(char ** args)
{
    pid_t pid;
    int rc;

    pid = getpid();
    printf("1Process ID before fork: %d\n", (int)pid);

    switch(fork()) {
        case -1:
            syserr("fork");
        case 0:
            pid = getpid();
            printf("2Process ID in child after fork: %d\n", pid);
            execvp(args[0], args);
            syserr("execl");
    }

    pid = getpid();
    printf("3Process ID in parent after fork: %d\n", pid);
}

void syserr(char * msg)   // report error code and abort
{
   fprintf(stderr,"%s: %s", strerror(errno), msg);
   exit(0);
}